<?php

namespace DoctrineProxy;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class ZSELEX_Entity_ProductOptionProxy extends \ZSELEX_Entity_ProductOption implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getOption_id()
    {
        $this->__load();
        return parent::getOption_id();
    }

    public function setOption_id($option_id)
    {
        $this->__load();
        return parent::setOption_id($option_id);
    }

    public function getShop()
    {
        $this->__load();
        return parent::getShop();
    }

    public function setShop(\ZSELEX_Entity_Shop $shop)
    {
        $this->__load();
        return parent::setShop($shop);
    }

    public function getOption_name()
    {
        $this->__load();
        return parent::getOption_name();
    }

    public function setOption_name($option_name)
    {
        $this->__load();
        return parent::setOption_name($option_name);
    }

    public function getOption_value()
    {
        $this->__load();
        return parent::getOption_value();
    }

    public function setOption_value($option_value)
    {
        $this->__load();
        return parent::setOption_value($option_value);
    }

    public function getOption_type()
    {
        $this->__load();
        return parent::getOption_type();
    }

    public function setOption_type($option_type)
    {
        $this->__load();
        return parent::setOption_type($option_type);
    }

    public function getParent_option_id()
    {
        $this->__load();
        return parent::getParent_option_id();
    }

    public function setParent_option_id($parent_option_id)
    {
        $this->__load();
        return parent::setParent_option_id($parent_option_id);
    }

    public function getSort_order()
    {
        $this->__load();
        return parent::getSort_order();
    }

    public function setSort_order($sort_order)
    {
        $this->__load();
        return parent::setSort_order($sort_order);
    }

    public function getReflection()
    {
        $this->__load();
        return parent::getReflection();
    }

    public function offsetExists($key)
    {
        $this->__load();
        return parent::offsetExists($key);
    }

    public function offsetGet($key)
    {
        $this->__load();
        return parent::offsetGet($key);
    }

    public function offsetSet($key, $value)
    {
        $this->__load();
        return parent::offsetSet($key, $value);
    }

    public function offsetUnset($key)
    {
        $this->__load();
        return parent::offsetUnset($key);
    }

    public function toArray()
    {
        $this->__load();
        return parent::toArray();
    }

    public function merge(array $array)
    {
        $this->__load();
        return parent::merge($array);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'option_id', 'shop', 'option_name', 'option_type', 'option_value', 'parent_option_id', 'sort_order', 'option_values', 'option_products', 'option_product_values');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}