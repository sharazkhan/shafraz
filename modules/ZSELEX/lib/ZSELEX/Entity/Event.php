<?php

/**
 * ZSELEX.
 *
 * @copyright 
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package ShopProducts
 * @author  <ACTA-IT>.
 * @link http://modulestudio.de/
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Tue Feb 07 21:56:43 IST 2012.
 */
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for shop entities.
 *
 *
 * @ORM\Entity(repositoryClass="ZSELEX_Entity_Repository_EventRepository")
 * @ORM\Table(name="zselex_shop_events")
 */
class ZSELEX_Entity_Event extends Zikula_EntityAccess
{
    /**
     * shop_event_id field (record shop_event_id)
     *
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    public $shop_event_id = 0;

    /**
     * @ORM\ManyToOne(targetEntity="ZSELEX_Entity_Shop", inversedBy="shop_events")
     * @ORM\JoinColumn(name="shop_id", referencedColumnName="shop_id")
     */
    private $shop;

    /**
     * @ORM\Column(length=255 , nullable=true)
     * 
     * @var string
     */
    public $shop_event_name = '';

    /**
     * @ORM\Column(length=255 , nullable=false)
     *
     * @var string
     */
    public $event_urltitle = '';

    /**
     * @ORM\Column(type="text" , nullable=true)
     */
    public $shop_event_shortdescription = '';

    /**
     * @ORM\Column(type="text" , nullable=true)
     *
     * @var string .
     */
    public $shop_event_description = '';

    /**
     * @ORM\Column(type="text" , nullable=true)
     * 
     * @var text .
     */
    public $shop_event_keywords = '';

    /**
     * @ORM\Column(type="integer" , nullable=true)
     */
    public $news_article_id = '';

    /**
     * @ORM\Column(type="date" , nullable=true)
     * 
     * @var date.
     */
    public $shop_event_startdate = null;

    /**
     * @ORM\Column(length=255 , nullable=true)
     *
     * @var text.
     */
    public $shop_event_starthour = '';

    /**
     * @ORM\Column(length=255 , nullable=true)
     */
    public $shop_event_startminute = '';

    /**
     * @ORM\Column(type="date" , nullable=true)
     *
     * @var int.
     */
    public $shop_event_enddate = null;

    /**
     * @ORM\Column(length=255 , nullable=true)
     */
    public $shop_event_endhour;

    /**
     * @ORM\Column(length=255 , nullable=true)
     */
    public $shop_event_endminute;

    /**
     * @ORM\Column(type="date" , nullable=true)
     */
    public $activation_date = null;

    /**
     * @ORM\Column(length=255 , nullable=true)
     */
    public $event_image = '';

    /**
     * @ORM\Column(length=255 , nullable=true)
     */
    public $image_height = '';

    /**
     * @ORM\Column(length=255 , nullable=true)
     */
    public $image_width = '';

    /**
     * @ORM\Column(length=255 , nullable=true)
     */
    public $event_doc = '';

    /**
     * @ORM\Column(type="integer" , nullable=true)
     */
    public $product_id = 0;

    /**
     * @ORM\Column(length=255 , nullable=true)
     */
    public $showfrom = '';

    /**
     * @ORM\Column(length=255 , nullable=true)
     */
    public $price;

    /**
     * @ORM\Column(length=255 , nullable=true)
     */
    public $contact_name;

    /**
     * @ORM\Column(length=255 , nullable=true)
     */
    public $event_link = '';

    /**
     * @ORM\Column(type="boolean")
     */
    public $open_new = 0;

    /**
     * @ORM\Column(type="smallint")
     */
    public $call_link_directly = 0;

    /**
     * @ORM\Column(length=255 , nullable=true)
     */
    public $email = '';

    /**
     * @ORM\Column(length=255 , nullable=true)
     */
    public $phone = '';

    /**
     * @ORM\Column(type="text" , nullable=true)
     */
    public $shop_event_venue = '';

    /**
     * @ORM\Column(type="boolean" , nullable=true)
     *
     * @var boolean.
     */
    public $exclusive = 0;

    /**
     * @ORM\Column(type="boolean" , nullable=true)
     * 
     * @var boolean.
     */
    public $status = '';

    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     *
     * @var datetime $cr_date.
     */
    public $cr_date;

    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="create")
     * 
     * @var integer $cr_uid.
     */
    public $cr_uid;

    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     *
     * @var datetime $lu_date.
     */
    public $lu_date;

    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="update")
     * 
     * @var integer $lu_uid.
     */
    public $lu_uid;

    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        
    }

    /**
     * Get id.
     * 
     * @return integer
     */
    public function getShop_event_id()
    {
        return $this->shop_event_id;
    }

    /**
     *
     * @return string
     */
    public function getShop()
    {
        return $this->shop;
    }

    /**
     * Set shop id.
     */
    public function setShop(ZSELEX_Entity_Shop $shop)
    { // type hinting
        $this->shop = $shop;
    }

    /**
     * Get advertise_type.
     *
     * @return void
     */
    public function getShop_event_name()
    {
        return $this->shop_event_name;
    }

    /**
     * Set advertise_type.
     * 
     * @param string $advertise_type.        	
     * @return void
     */
    public function setShop_event_name($shop_event_name)
    {
        $this->shop_event_name = $shop_event_name;
    }

    public function getEvent_urltitle()
    {
        return $this->event_urltitle;
    }

    public function setEvent_urltitle($event_urltitle)
    {
        $this->event_urltitle = $event_urltitle;
    }

    /**
     * Get level.
     * 
     * @return string
     */
    public function getShop_event_shortdescription()
    {
        return $this->shop_event_shortdescription;
    }

    /**
     * Set level.
     * 
     * @param string $level.        	
     */
    public function setShop_event_shortdescription($shop_event_shortdescription)
    {
        $this->shop_event_shortdescription = $shop_event_shortdescription;
    }

    /**
     * get the Country
     * 
     * @return integer
     */
    public function getShop_event_description()
    {
        return $this->shop_event_description;
    }

    /**
     * set the Country
     * 
     * @param string $country        	
     */
    public function setShop_event_description($shop_event_description)
    {
        $this->shop_event_description = $shop_event_description;
    }

    /**
     * get the Region
     * 
     * @return integer
     */
    public function getShop_event_keywords()
    {
        return $this->shop_event_keywords;
    }

    /**
     * set the Region
     * 
     * @param string $Region        	
     */
    public function setShop_event_keywords($shop_event_keywords)
    {
        $this->shop_event_keywords = $shop_event_keywords;
    }

    /**
     * get the City
     * 
     * @return integer
     */
    public function getNews_article_id()
    {
        return $this->news_article_id;
    }

    /**
     * set the City
     * 
     * @param string $city        	
     */
    public function setNews_article_id($news_article_id)
    {

        if (!$news_article_id) {
            $news_article_id = 0;
        }
        $this->news_article_id = $news_article_id;
    }

    /**
     * get the Area
     * 
     * @return integer
     */
    public function getShop_event_startdate()
    {
        return $this->shop_event_startdate;
    }

    /**
     * set the City
     * 
     * @param string $city        	
     */
    public function setShop_event_startdate($shop_event_startdate)
    {
        $this->shop_event_startdate = $shop_event_startdate;
    }

    /**
     * get the description
     * 
     * @return text
     */
    public function getShop_event_starthour()
    {
        return $this->shop_event_starthour;
    }

    /**
     * set the description
     * 
     * @param
     *        	text
     */
    public function setShop_event_starthour($shop_event_starthour)
    {
        $this->shop_event_starthour = $shop_event_starthour;
    }

    /**
     * get the keywords
     * 
     * @return text
     */
    public function getShop_event_startminute()
    {
        return $this->shop_event_startminute;
    }

    /**
     * set the keywords
     * 
     * @param
     *        	text
     */
    public function setShop_event_startminute($shop_event_startminute)
    {
        $this->shop_event_startminute = $shop_event_startminute;
    }

    /**
     * get the maxviews
     * 
     * @return int
     */
    public function getShop_event_enddate()
    {
        return $this->shop_event_enddate;
    }

    /**
     * set the maxviews
     * 
     * @param
     *        	int
     */
    public function setShop_event_enddate($shop_event_enddate)
    {
        $this->shop_event_enddate = $shop_event_enddate;
    }

    /**
     * get the totalviews
     * 
     * @return int
     */
    public function getShop_event_endhour()
    {
        return $this->shop_event_endhour;
    }

    /**
     * set the totalviews
     * 
     * @param
     *        	int
     */
    public function setShop_event_endhour($shop_event_endhour)
    {
        $this->shop_event_endhour = $shop_event_endhour;
    }

    /**
     * get the viewstoday
     * 
     * @return int
     */
    public function getShop_event_endminute()
    {
        return $this->shop_event_endminute;
    }

    /**
     * set the viewstoday
     * 
     * @param
     *        	int
     */
    public function setShop_event_endminute($shop_event_endminute)
    {
        $this->shop_event_endminute = $shop_event_endminute;
    }

    /**
     * get the maxclicks
     * 
     * @return int
     */
    public function getActivation_date()
    {
        return $this->activation_date;
    }

    /**
     * set the maxclicks
     * 
     * @param
     *        	int
     */
    public function setActivation_date($activation_date)
    {
        $this->activation_date = $activation_date;
    }

    /**
     * get the totalclicks
     * 
     * @return int
     */
    public function getEvent_image()
    {
        return $this->event_image;
    }

    /**
     * set the totalclicks
     * 
     * @param
     *        	int
     */
    public function setEvent_image($event_image)
    {
        $this->event_image = $event_image;
    }

    /**
     * get the clickstoday
     * 
     * @return int
     */
    public function getImage_height()
    {
        return $this->image_height;
    }

    /**
     * set the clickstoday
     * 
     * @param
     *        	int
     */
    public function setImage_height($image_height)
    {
        $this->image_height = $image_height;
    }

    /**
     * get the startdate
     * 
     * @return date
     */
    public function getImage_width()
    {
        return $this->image_width;
    }

    /**
     * set the startdate
     * 
     * @param
     *        	date
     */
    public function setImage_width($image_width)
    {
        $this->image_width = $image_width;
    }

    /**
     * get the enddate
     * 
     * @return date
     */
    public function getEvent_doc()
    {
        return $this->event_doc;
    }

    /**
     * set the enddate
     * 
     * @param
     *        	date
     */
    public function setEvent_doc($event_doc)
    {
        $this->event_doc = $event_doc;
    }

    /**
     *
     * @return integer
     */
    public function getProduct_id()
    {
        return $this->product_id;
    }

    /**
     *
     * @return void
     */
    public function setProduct_id($product_id)
    {
        if (!$product_id) {
            $product_id = 0;
        }
        $this->product_id = $product_id;
    }

    /**
     *
     * @return integer
     */
    public function getShowfrom()
    {
        return $this->showfrom;
    }

    /**
     *
     * @return void
     */
    public function setShowfrom($showfrom)
    {
        $this->showfrom = $showfrom;
    }

    /**
     *
     * @return decimal
     */
    public function getPrice()
    {
        return $this->price;
    }

    /**
     *
     * @return decimal
     */
    public function setPrice($price)
    {
        $this->price = $price;
    }

    public function getEvent_link()
    {
        return $this->event_link;
    }

    public function setEvent_link($event_link)
    {
        $this->event_link = $event_link;
    }

    public function getOpen_new()
    {
        return $this->open_new;
    }

    public function setOpen_new($open_new)
    {

        if (!$open_new) {
            $open_new = 0;
        }
        $this->open_new = $open_new;
    }

    public function getCall_link_directly()
    {
        return $this->call_link_directly;
    }

    public function setCall_link_directly($call_link_directly)
    {
        $this->call_link_directly = $call_link_directly;
    }

    /**
     *
     * @return integer
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     *
     * @return void
     */
    public function setEmail($email)
    {
        $this->email = $email;
    }

    /**
     *
     * @return integer
     */
    public function getPhone()
    {
        return $this->phone;
    }

    /**
     *
     * @return void
     */
    public function setPhone($phone)
    {
        $this->phone = $phone;
    }

    /**
     *
     * @return integer
     */
    public function getShop_event_venue()
    {
        return $this->shop_event_venue;
    }

    /**
     *
     * @return void
     */
    public function setShop_event_venue($shop_event_venue)
    {
        $this->shop_event_venue = $shop_event_venue;
    }

    /**
     *
     * @return integer
     */
    public function getExclusive()
    {
        return $this->exclusive;
    }

    /**
     *
     * @return void
     */
    public function setExclusive($exclusive)
    {
        $this->exclusive = $exclusive;
    }

    /**
     *
     * @return integer
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     *
     * @return void
     */
    public function setStatus($status)
    {
        $this->status = $status;
    }

    /**
     * Get created user id.
     *
     * @return integer[]
     */
    public function getCr_date()
    {
        return $this->cr_date;
    }

    /**
     * Set created user id.
     *
     * @param integer[] $createdUserId.        	
     *
     * @return void
     */
    public function setCr_date($cr_date)
    {
        $this->cr_date = $cr_date;
    }

    /**
     * Get updated user id.
     *
     * @return integer[]
     */
    public function getCr_uid()
    {
        return $this->cr_uid;
    }

    /**
     * Set updated user id.
     *
     * @param integer[] $updatedUserId.        	
     *
     * @return void
     */
    public function setCr_uid($cr_uid)
    {
        $this->cr_uid = $cr_uid;
    }

    /**
     * Get created date.
     *
     * @return datetime[]
     */
    public function getLu_date()
    {
        return $this->lu_date;
    }

    /**
     * Set created date.
     *
     * @param datetime[] $createdDate.        	
     *
     * @return void
     */
    public function setLu_date($lu_date)
    {
        $this->lu_date = $lu_date;
    }

    /**
     * Get updated date.
     *
     * @return datetime[]
     */
    public function getLu_uid()
    {
        return $this->lu_uid;
    }

    /**
     * Get updated date.
     *
     * @return datetime[]
     */
    public function setLu_uid($lu_uid)
    {
        $this->lu_uid = $lu_uid;
    }

    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     * - no access to entity manager or unit of work apis
     * - no access to associations (not initialised yet)
     *
     * @see ShopProducts_Entity_Shop::postLoadCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostLoadCallback()
    {
        // echo 'loaded a record ...';

        /*
         * $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
         * $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
         *
         * $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
         * if ($currentFunc != 'edit') {
         * $this['shop_name'] = ((isset($this['shop_name']) && !empty($this['shop_name'])) ? DataUtil::formatForDisplayHTML($this['shop_name']) : '');
         * }
         * if ($currentFunc != 'edit') {
         * $this['address'] = ((isset($this['address']) && !empty($this['address'])) ? DataUtil::formatForDisplayHTML($this['address']) : '');
         * }
         * $this->prepareItemActions();
         */
        return true;
    }

    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     * - no access to entity manager or unit of work apis
     * - no identifiers available if using an identity generator like sequences
     * - Doctrine won't recognize changes on relations which are done here
     * if this method is called by cascade persist
     * - no creation of other entities allowed
     *
     * @see ShopProducts_Entity_Shop::prePersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPrePersistCallback()
    {
        // echo 'inserting a record ...';
        // $this->validate();
        return true;
    }

    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     * - no access to entity manager or unit of work apis
     *
     * @see ShopProducts_Entity_Shop::postPersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostPersistCallback()
    {
        // echo 'inserted a record ...';
        return true;
    }

    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     * - no access to entity manager or unit of work apis
     * - will not be called for a DQL DELETE statement
     *
     * @see ShopProducts_Entity_Shop::preRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreRemoveCallback()
    {
        /*
         * // delete workflow for this entity
         * $result = Zikula_Workflow_Util::deleteWorkflow($this);
         * if ($result === false) {
         * $dom = ZLanguage::getModuleDomain('ShopProducts');
         * return LogUtil::registerError(__('Error! Could not remove stored workflow.', $dom));
         * }
         */
        return true;
    }

    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     * - no access to entity manager or unit of work apis
     * - will not be called for a DQL DELETE statement
     *
     * @see ShopProducts_Entity_Shop::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        // echo 'deleted a record ...';
        return true;
    }

    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     * - no access to entity manager or unit of work apis
     * - will not be called for a DQL UPDATE statement
     * - changes on associations are not allowed and won't be recognized by flush
     * - changes on properties won't be recognized by flush as well
     * - no creation of other entities allowed
     *
     * @see ShopProducts_Entity_Shop::preUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreUpdateCallback()
    {
        // echo 'updating a record ...';
        // $this->validate();
        return true;
    }

    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     * - no access to entity manager or unit of work apis
     * - will not be called for a DQL UPDATE statement
     *
     * @see ShopProducts_Entity_Shop::postUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostUpdateCallback()
    {
        // echo 'updated a record ...';
        return true;
    }

    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see ShopProducts_Entity_Shop::preSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreSaveCallback()
    {
        // echo 'saving a record ...';
        // $this->validate();
        return true;
    }

    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see ShopProducts_Entity_Shop::postSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostSaveCallback()
    {
        // echo 'saved a record ...';
        return true;
    }
}