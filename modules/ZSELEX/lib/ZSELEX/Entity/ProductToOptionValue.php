<?php

/**
 * ZSELEX.
 *
 * @copyright 
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package ShopProducts
 * @author  <>.
 * @link http://modulestudio.de/
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Tue Feb 07 21:56:43 IST 2012.
 */
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for shop entities.
 *
 *
 * @ORM\Entity(repositoryClass="ZSELEX_Entity_Repository_ProductOptionRepository")
 * @ORM\Table(name="zselex_product_to_options_values")
 */
class ZSELEX_Entity_ProductToOptionValue extends Zikula_EntityAccess {
	
	/**
	 * type_id field (record type_id)
	 *
	 * @ORM\Id
	 * @ORM\Column(type="bigint")
	 * @ORM\GeneratedValue(strategy="AUTO")
	 */
	protected $product_to_options_value_id;
	
	/**
	 * @ORM\ManyToOne(targetEntity="ZSELEX_Entity_ProductToOption", inversedBy="product_to_options_values" , fetch="EAGER")
	 * @ORM\JoinColumn(name="product_to_options_id", referencedColumnName="product_to_options_id")
	 */
	public $product_to_option;
	
	/**
	 * @ORM\ManyToOne(targetEntity="ZSELEX_Entity_Product", inversedBy="product_options_values" , fetch="EAGER")
	 * @ORM\JoinColumn(name="product_id", referencedColumnName="product_id")
	 */
	public $product;
	
	/**
	 * @ORM\ManyToOne(targetEntity="ZSELEX_Entity_ProductOption", inversedBy="option_product_values" , fetch="EAGER")
	 * @ORM\JoinColumn(name="option_id", referencedColumnName="option_id")
	 */
	protected $option;
	
	/**
	 * @ORM\Column(type="integer" , nullable=true)
	 * 
	 * @var integer $status.
	 */
	protected $parent_option_id = 0;
	
	/**
	 * @ORM\ManyToOne(targetEntity="ZSELEX_Entity_ProductOptionValue" , fetch="EAGER")
	 * @ORM\JoinColumn(name="option_value_id", referencedColumnName="option_value_id")
	 */
	protected $option_value_id;
	
	/**
	 * @ORM\Column(type="integer" , nullable=true)
	 * 
	 * @var integer $status.
	 */
	protected $parent_option_value_id;
	
	/**
	 * field (prd_price)
	 *
	 * @ORM\Column(length=10, nullable=true)
	 */
	private $price_prefix;
	
	/**
	 * field (prd_price)
	 *
	 * @ORM\Column(length=255, nullable=true)
	 */
	private $price = 0.0000;
	
	/**
	 * @ORM\Column(type="integer" , nullable=true)
	 * 
	 * @var integer $status.
	 */
	protected $qty;
	
	/**
	 * Constructor.
	 * Will not be called by Doctrine and can therefore be used
	 * for own implementation purposes. It is also possible to add
	 * arbitrary arguments as with every other class method.
	 */
	public function __construct() {
	}
	
	/**
	 * Get id.
	 *
	 * @return integer
	 */
	public function getProduct_to_options_value_id() {
		return $this->product_to_options_value_id;
	}
	public function getProduct_to_option() {
		return $this->product_to_option;
	}
	public function setProduct_to_option(ZSELEX_Entity_ProductToOption $product_to_option) {
		$this->product_to_option = $product_to_option;
	}
	public function getProduct() {
		return $this->product;
	}
	public function setProduct(ZSELEX_Entity_Product $product) {
		$this->product = $product;
	}
	public function getOption() {
		return $this->option;
	}
	public function setOption(ZSELEX_Entity_ProductOption $option) {
		$this->option = $option;
	}
	public function getParent_option_id() {
		return $this->parent_option_id;
	}
	public function setParent_option_id($parent_option_id) {
		$this->parent_option_id = $parent_option_id;
	}
	public function getOption_value_id() {
		return $this->option_value_id;
	}
	public function setOption_value_id(ZSELEX_Entity_ProductOptionValue $option_value_id) {
		$this->option_value_id = $option_value_id;
	}
	public function getParent_option_value_id() {
		return $this->parent_option_value_id;
	}
	public function setParent_option_value_id($parent_option_value_id) {
		$this->parent_option_value_id = $parent_option_value_id;
	}
	public function getOption_value() {
		return $this->option_value;
	}
	public function setOption_value($option_value) {
		$this->option_value = $option_value;
	}
	public function getPrice() {
		return $this->price;
	}
	public function setPrice($price) {
		$this->price = $price;
	}
	public function getPrice_prefix() {
		return $this->price_prefix;
	}
	public function setPrice_prefix($price_prefix) {
		$this->price_prefix = $price_prefix;
	}
	public function getQty() {
		return $this->qty;
	}
	public function setQty($qty) {
		$this->qty = $qty;
	}
	
	/**
	 * Post-Process the data after the entity has been constructed by the entity manager.
	 * The event happens after the entity has been loaded from database or after a refresh call.
	 *
	 * Restrictions:
	 * - no access to entity manager or unit of work apis
	 * - no access to associations (not initialised yet)
	 *
	 * @see ShopProducts_Entity_Shop::postLoadCallback()
	 * @return boolean true if completed successfully else false.
	 */
	protected function performPostLoadCallback() {
		// echo 'loaded a record ...';
		
		/*
		 * $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
		 * $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
		 *
		 * $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
		 * if ($currentFunc != 'edit') {
		 * $this['shop_name'] = ((isset($this['shop_name']) && !empty($this['shop_name'])) ? DataUtil::formatForDisplayHTML($this['shop_name']) : '');
		 * }
		 * if ($currentFunc != 'edit') {
		 * $this['address'] = ((isset($this['address']) && !empty($this['address'])) ? DataUtil::formatForDisplayHTML($this['address']) : '');
		 * }
		 * $this->prepareItemActions();
		 */
		return true;
	}
	
	/**
	 * Pre-Process the data prior to an insert operation.
	 * The event happens before the entity managers persist operation is executed for this entity.
	 *
	 * Restrictions:
	 * - no access to entity manager or unit of work apis
	 * - no identifiers available if using an identity generator like sequences
	 * - Doctrine won't recognize changes on relations which are done here
	 * if this method is called by cascade persist
	 * - no creation of other entities allowed
	 *
	 * @see ShopProducts_Entity_Shop::prePersistCallback()
	 * @return boolean true if completed successfully else false.
	 */
	protected function performPrePersistCallback() {
		// echo 'inserting a record ...';
		// $this->validate();
		return true;
	}
	
	/**
	 * Post-Process the data after an insert operation.
	 * The event happens after the entity has been made persistant.
	 * Will be called after the database insert operations.
	 * The generated primary key values are available.
	 *
	 * Restrictions:
	 * - no access to entity manager or unit of work apis
	 *
	 * @see ShopProducts_Entity_Shop::postPersistCallback()
	 * @return boolean true if completed successfully else false.
	 */
	protected function performPostPersistCallback() {
		// echo 'inserted a record ...';
		return true;
	}
	
	/**
	 * Pre-Process the data prior a delete operation.
	 * The event happens before the entity managers remove operation is executed for this entity.
	 *
	 * Restrictions:
	 * - no access to entity manager or unit of work apis
	 * - will not be called for a DQL DELETE statement
	 *
	 * @see ShopProducts_Entity_Shop::preRemoveCallback()
	 * @return boolean true if completed successfully else false.
	 */
	protected function performPreRemoveCallback() {
		/*
		 * // delete workflow for this entity
		 * $result = Zikula_Workflow_Util::deleteWorkflow($this);
		 * if ($result === false) {
		 * $dom = ZLanguage::getModuleDomain('ShopProducts');
		 * return LogUtil::registerError(__('Error! Could not remove stored workflow.', $dom));
		 * }
		 */
		return true;
	}
	
	/**
	 * Post-Process the data after a delete.
	 * The event happens after the entity has been deleted.
	 * Will be called after the database delete operations.
	 *
	 * Restrictions:
	 * - no access to entity manager or unit of work apis
	 * - will not be called for a DQL DELETE statement
	 *
	 * @see ShopProducts_Entity_Shop::postRemoveCallback()
	 * @return boolean true if completed successfully else false.
	 */
	protected function performPostRemoveCallback() {
		// echo 'deleted a record ...';
		return true;
	}
	
	/**
	 * Pre-Process the data prior to an update operation.
	 * The event happens before the database update operations for the entity data.
	 *
	 * Restrictions:
	 * - no access to entity manager or unit of work apis
	 * - will not be called for a DQL UPDATE statement
	 * - changes on associations are not allowed and won't be recognized by flush
	 * - changes on properties won't be recognized by flush as well
	 * - no creation of other entities allowed
	 *
	 * @see ShopProducts_Entity_Shop::preUpdateCallback()
	 * @return boolean true if completed successfully else false.
	 */
	protected function performPreUpdateCallback() {
		// echo 'updating a record ...';
		// $this->validate();
		return true;
	}
	
	/**
	 * Post-Process the data after an update operation.
	 * The event happens after the database update operations for the entity data.
	 *
	 * Restrictions:
	 * - no access to entity manager or unit of work apis
	 * - will not be called for a DQL UPDATE statement
	 *
	 * @see ShopProducts_Entity_Shop::postUpdateCallback()
	 * @return boolean true if completed successfully else false.
	 */
	protected function performPostUpdateCallback() {
		// echo 'updated a record ...';
		return true;
	}
	
	/**
	 * Pre-Process the data prior to a save operation.
	 * This combines the PrePersist and PreUpdate events.
	 * For more information see corresponding callback handlers.
	 *
	 * @see ShopProducts_Entity_Shop::preSaveCallback()
	 * @return boolean true if completed successfully else false.
	 */
	protected function performPreSaveCallback() {
		// echo 'saving a record ...';
		// $this->validate();
		return true;
	}
	
	/**
	 * Post-Process the data after a save operation.
	 * This combines the PostPersist and PostUpdate events.
	 * For more information see corresponding callback handlers.
	 *
	 * @see ShopProducts_Entity_Shop::postSaveCallback()
	 * @return boolean true if completed successfully else false.
	 */
	protected function performPostSaveCallback() {
		// echo 'saved a record ...';
		return true;
	}
}
