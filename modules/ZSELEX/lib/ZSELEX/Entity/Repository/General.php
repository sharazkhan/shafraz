<?php

/**
 * ZSELEX.
 *
 * @copyright 
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package ShopProducts
 * @author  <>.
 * @link http://modulestudio.de/
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Tue Feb 07 21:56:43 IST 2012.
 */
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
use DoctrineExtensions\Paginate\Paginate;
use Doctrine\ORM;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the base repository class for shop entities.
 */
class ZSELEX_Entity_Repository_General extends EntityRepository
{

    function updateEntity($args = array(), $entity = '', $fields = array(),
                          $where = array(), $notequal = array())
    {
        // echo "<pre>"; print_r($args); echo "</pre>"; exit;
        // $setParams = $args['setParams'];
        $setParams = array();
        $entity    = (isset($args ['entity']) && !empty($args ['entity'])) ? $args ['entity']
                : $entity;
        $fields    = (isset($args ['fields']) && !empty($args ['fields'])) ? $args ['fields']
                : $fields;
        $where     = $this->generateWhere((isset($args ['where']) && !empty($args ['where']))
                    ? $args ['where'] : $where, null,
            (isset($args ['notequal']) && !empty($args ['notequal'])) ? $args ['notequal']
                    : $notequal );
        $items     = '';
        foreach ($fields as $fkey => $fval) {
            // $items .= "a." . $fkey . "=" . "'$fval'" . ',';
            $items .= "a.".$fkey."=".":$fkey".',';
            $setParams [$fkey] = $fval;
        }
        // echo $items; exit;
        // echo "<pre>"; print_r($setParams); echo "</pre>"; exit;
        $items = substr($items, 0, - 1);

        $setParams += $where ['setParams'];
        // echo "<pre>"; print_r($setParams); echo "</pre>"; exit;
        // $where = $this->generateWhere($args['where']);
        $query      = "UPDATE $entity a SET $items WHERE ".$where ['where'];
        // echo $query; exit;
        $q          = $this->_em->createQuery($query);
        $q->setParameters($setParams);
        $numUpdated = $q->execute();
        // return $numUpdated;
        return true;
    }

    public function getCount($args, $entity = '', $field = '', $where = array())
    {
        // echo "<pre>"; print_r($args); echo "</pre>"; exit;
        try {
            $setParams = array();
            $entity    = (isset($args ['entity']) && !empty($args ['entity'])) ? $args ['entity']
                    : $entity;
            $field     = (isset($args ['field']) && !empty($args ['field'])) ? $args ['field']
                    : $field;
            // $where = $this->generateWhere((isset($args['where']) && !empty($args['where'])) ? $args['where'] : $where);
            $dqlRes    = $this->generateWhere((isset($args ['where']) && !empty($args ['where']))
                        ? $args ['where'] : $where );

            // echo "<pre>"; print_r($dqlRes); echo "</pre>"; exit;
            $dql = "SELECT COUNT(a.$field) FROM $entity a
                    WHERE ".$dqlRes ['where'];
            // echo $dql; exit;

            $setParams = $dqlRes ['setParams'];
            $query     = $this->_em->createQuery($dql);
            if (isset($setParams) && !empty($setParams)) {
                $query->setParameters($setParams);
            }
            // $query->setParameters(array('prod' => 332, 'opt' => 35));
            $count = $query->getSingleScalarResult();
            return $count;
        } catch (\Exception $e) {
            echo 'Message: '.$e->getMessage();
            exit();
        }
    }

    public function getCount2($args)
    {
        // echo "<pre>"; print_r($args); echo "</pre>"; exit;
        try {
            $entity    = $args ['entity'];
            $field     = $args ['field'];
            $where     = $args ['where'];
            $setParams = $args ['setParams'];

            // echo "<pre>"; print_r($dqlRes); echo "</pre>"; exit;
            $dql = "SELECT COUNT(a.$field) FROM $entity a
                    WHERE ".$where;
            // echo $dql; exit;

            $query = $this->_em->createQuery($dql);
            if (isset($setParams) && !empty($setParams)) {
                $query->setParameters($setParams);
            }
            // $query->setParameters(array('prod' => 332, 'opt' => 35));
            $count = $query->getSingleScalarResult();
            return $count;
        } catch (\Exception $e) {
            echo 'Message: '.$e->getMessage();
            exit();
        }
    }

    public function generateFields($fields)
    {
        $fields = $fields;
        // echo "<pre>"; print_r($fields); echo "</pre>"; exit;
        $output = '';
        $output = implode(' , ', $fields);
        return $output;
    }

    public function generateWhere($where, $like = array(), $notEqual = array())
    {
        $whereSql  = '';
        $setParams = array();
        $i         = 0;
        $j         = 0;
        if (isset($where) && !empty($where)) {
            $i = 1;
            foreach ($where as $key => $val) {
                if (isset($key) && isset($val)) {
                    $keyArr = str_split($key);
                    $key1   = $key;
                    if ($keyArr [1] == ".") {
                        $key1 = substr($key, 2);
                    }
                    $whereArray []  = $key."="."?$i";
                    $setParams [$i] = $val;
                }
                $i ++;
            }
        }

        // echo "<pre>"; print_r($like); echo "</pre>"; exit;

        $j = $i + 1;
        if (isset($like) && !empty($like)) {
            foreach ($like as $lkey => $lval) {
                // $xplode = explode('LIKE', $lval);
                // $keyArr1 = $xplode[0];
                $keyArr1 = str_split($lkey);
                // echo "<pre>"; print_r($keyArr1); echo "</pre>"; exit;
                // $key2 = $xplode[0];
                $key2    = $lkey;

                if ($keyArr1 [1] == ".") {
                    // $key2 = substr($xplode[0], 2);
                    $key2 = substr($lkey, 2);
                }
                $key2 = trim($key2);
                $key2 = str_replace("_", '', $key2);

                // $whereArray[] = $xplode[0] . " LIKE " . ":$key2";
                $whereArray []     = $lkey." LIKE ".":$key2";
                // $whereArray[] = $xplode[0] . "LIKE '%" . DataUtil::formatForStore('prem') . "%'";
                // $setParams[$key2] = trim($xplode[1]);
                $setParams [$key2] = trim($lval);
                $j ++;
            }
        }

        $k = $j + 1;
        if (isset($notEqual) && !empty($notEqual)) {

            foreach ($notEqual as $key => $val) {
                if (isset($key) && isset($val)) {
                    $keyArr = str_split($key);
                    $key1   = $key;
                    if ($keyArr [1] == ".") {
                        $key1 = substr($key, 2);
                    }
                    $whereArray []  = $key."!="."?$k";
                    $setParams [$k] = $val;
                }
                $k ++;
            }
        }

        $whereSql = implode(' AND ', $whereArray);
        // echo $whereSql; exit;
        // echo "<pre>"; print_r($setParams); echo "</pre>"; exit;
        $return   = array(
            'where' => $whereSql,
            'setParams' => $setParams
        );
        // echo "<pre>"; print_r($return); echo "</pre>";

        return $return;
    }

    public function genWhere($whereArr)
    {
        // echo "<pre>"; print_r($fields); echo "</pre>"; exit;
        $where = '';
        $where = implode(' AND ', $whereArr);
        return $where;
    }

    /**
     * Creates a Query.
     * 
     * @param array $args.
     *        	array entity
     *        	array fields
     *        	array joins
     *        	array where
     *        	string groupby
     *        	string orderby
     *        	Example Usage :
     *        	$args = array(
     *        	'entity' => 'ZSELEX_Entity_Shop',
     *        	'fields' => array('a.shop_id', 'a.shop_name', 'b.city_name', 'c.aff_id', 'c.aff_image'),
     *        	'joins' => array('LEFT JOIN a.city b', 'LEFT JOIN a.aff_id c'),
     *        	'where' => array('a.shop_id' => $shop_id)
     *        	);
     * @return single row
     */
    public function get($args)
    {
        // echo "<pre>"; print_r($args); echo "</pre>"; exit;
        try {
            $entity = $args ['entity'];
            $alias  = $args ['alias'];
            if (isset($args ['fields']) && !empty($args ['fields'])) {
                $fields = $this->generateFields($args ['fields']);
            } else {
                if (isset($alias) && !empty($alias)) {
                    $fields = $alias;
                } else {
                    $fields = "a";
                }
            }
            $setParams = array();
            // $args['setParams'] = array('productId' => 22);
            if (isset($args ['setParams']) && !empty($args ['setParams'])) {
                $setParams = $args ['setParams'];
            }
            $whereQuery = ' ';
            $w          = 0;
            if (!empty($args ['where']) || !empty($args ['like'])) {
                $where      = $this->generateWhere($args ['where'],
                    $args ['like']);
                $whereQuery = ' WHERE '.$where ['where'];
                $setParams += $where ['setParams'];
                $w ++;
            }
            // echo "<pre>"; print_r($where); echo "</pre>";
            // echo "<pre>"; print_r($setParams); echo "</pre>";
            $joins = "";
            if (isset($args ['joins']) && !empty($args ['joins'])) {
                $joins = implode(' ', $args ['joins']);
            }

            $subquery = '';
            if (isset($args ['subquery']) && !empty($args ['subquery'])) {
                if ($w > 0) {
                    $subquery = ' AND '.implode(' AND ', $args ['subquery']);
                } else {
                    $subquery = ' WHERE '.implode(' AND ', $args ['subquery']);
                }
            }

            $groupby = '';
            if (isset($args ['groupby']) && !empty($args ['groupby'])) {
                $groupby = " GROUP BY ".$args ['groupby'];
            }
            $orderby = '';
            if (isset($args ['orderby']) && !empty($args ['orderby'])) {
                $orderby = " ORDER BY ".$args ['orderby'];
            }

            $dql = "SELECT ".$fields."
                 FROM ".$entity." a
                 ".$joins."
                 ".$whereQuery." ".$subquery." ".$groupby." ".$orderby;
            // echo $dql . '<br>'; exit;
            if ($args ['exit'] == true) {
                echo $dql.'<br>'; // exit;
            }
            $query = $this->_em->createQuery($dql);
            $query->useResultCache(true);
            $query->setFetchMode($orderby, $groupby, $w);
            if (isset($setParams) && !empty($setParams)) {
                $query->setParameters($where ['setParams']);
            }
            $result = $query->getOneOrNullResult(2);
            // $result = $query->getSingleResult();
            if ($args ['print_result'] == true) {
                 //echo "<pre>"; print_r($result); echo "</pre>"; exit;
            }
            return $result;
        } catch (\Exception $e) {
            echo 'Message: '.$e->getMessage().'<br>'; //exit;
            // echo $dql . '<br>';
            // echo $query->getSQL();
        }
    }

    /**
     * Creates a Query.
     * 
     * @param array $args.
     *        	array entity
     *        	array fields
     *        	array joins
     *        	array where
     *        	string groupby
     *        	string orderby
     *        	Example Usage :
     *        	$getArgs = array(
     *        	'entity' => 'ZSELEX_Entity_Shop',
     *        	'fields' => array('a.shop_id', 'a.shop_name', 'b.city_name', 'c.aff_id', 'c.aff_image'),
     *        	'joins' => array('LEFT JOIN a.city b', 'LEFT JOIN a.aff_id c'),
     *        	'where' => array('a.shop_id' => $shop_id)
     *        	);
     * @return single row
     */
    public function getAll($args)
    {
        // echo "<pre>"; print_r($args); echo "</pre>";
        try {
            $dqlQuery = '';
            $entity   = $args ['entity'];
            $alias    = $args ['alias'];
            if (isset($args ['fields']) && !empty($args ['fields'])) {
                $fields = $this->generateFields($args ['fields']);
            } else {
                if (isset($alias) && !empty($alias)) {
                    $fields = $alias;
                } else {
                    $fields = "a";
                }
            }
            $setParams  = array();
            $startlimit = $args ['startlimit'];
            if ($startlimit > 0) {
                $startlimit = $startlimit - 1;
            }
            $offset   = $args ['offset'];
            $paginate = $args ['paginate'];
            $sql      = $args ['sql'];
            $like     = $args ['like'];

            if (isset($args ['setParams']) && !empty($args ['setParams'])) {
                $setParams = $args ['setParams'];
            }

            $joins = "";
            if (isset($args ['joins']) && !empty($args ['joins'])) {
                $joins = implode(' ', $args ['joins']);
                $dqlQuery .= $joins;
            }

            $whereQuery = ' ';
            $w          = 0;
            if (!empty($args ['where']) || !empty($args ['like'])) {
                $where      = $this->generateWhere($args ['where'],
                    $args ['like']);
                $whereQuery = ' WHERE '.$where ['where'];
                $dqlQuery .= $whereQuery;
                $setParams += $where ['setParams'];
                $w ++;
            }
            // echo "<pre>"; print_r($where); echo "</pre>"; exit;
            // echo $subquery; exit;

            $subquery = '';
            if (isset($args ['subquery']) && !empty($args ['subquery'])) {
                if ($w > 0) {
                    $subquery = ' AND '.implode(' AND ', $args ['subquery']);
                } else {
                    $subquery = ' WHERE '.implode(' AND ', $args ['subquery']);
                }
                $dqlQuery .= $subquery;
            }
            // echo $joins; exit;
            $groupby = '';
            if (isset($args ['groupby']) && !empty($args ['groupby'])) {
                $groupby = "  GROUP BY  ".$args ['groupby'];
                $dqlQuery .= $groupby;
            }
            $orderby = '';
            if (isset($args ['orderby']) && !empty($args ['orderby'])) {
                $orderby = " ORDER BY ".$args ['orderby'];
                $dqlQuery .= $orderby;
            }
            // $sql = '';
            $dql = "SELECT ".$fields."
                 FROM ".$entity." a
                 ".$joins." ".$whereQuery." ".$subquery." ".$groupby." ".$orderby;

            // echo $dql . '<br>';
            // exit;
            if ($args ['print'] == true) {
                echo $dql.'<br>'; // exit;
            }
            $query = $this->_em->createQuery($dql);
            $query->useResultCache(true);

            if (isset($setParams) && !empty($setParams)) {
                $query->setParameters($setParams);
            }

            if (isset($offset) && $offset > 0) {
                $query->setFirstResult($startlimit);
                $query->setMaxResults($offset);
            }

            if ($paginate == true) {
                $total_count = Paginate::getTotalQueryResults($query);
            }
            $result = $query->getArrayResult();
            $return = array();
            if ($paginate == true) {
                $count             = $total_count;
                $return ['result'] = $result;
                $return ['count']  = $total_count;
            } else {
                $return = $result;
            }

            return $return;
        } catch (\Exception $e) {
            echo 'Message: '.$e->getMessage().'<br>';
            exit;
            // echo $query->getSQL();
        }
    }

    /**
     * Creates a Query.
     * 
     * @param array $args.
     *        	array entity
     *        	array fields
     *        	array joins
     *        	array where
     *        	string groupby
     *        	string orderby
     *        	Example Usage :
     *        	$args = array(
     *        	'entity' => 'ZSELEX_Entity_Shop',
     *        	'fields' => array('a.shop_id', 'a.shop_name', 'b.city_name', 'c.aff_id', 'c.aff_image'),
     *        	'joins' => array('LEFT JOIN a.city b', 'LEFT JOIN a.aff_id c'),
     *        	'where' => array('a.shop_id' => $shop_id)
     *        	);
     * @return single row
     */
    public function fetch($args)
    {
        try {
            // echo "<pre>"; print_r($args); echo "</pre>"; exit;
            // echo "class :" . get_class($this);
            // $before = microtime(true);
            $entity = $args ['entity'];
            $alias  = $args ['alias'];

            $startlimit = $args ['startlimit'];
            if ($startlimit > 0) {
                $startlimit = $startlimit - 1;
            }
            $offset = $args ['offset'];
            if (isset($args ['fields']) && !empty($args ['fields'])) {
                $fields = $this->generateFields($args ['fields']);
            } else {
                if (isset($alias) && !empty($alias)) {
                    $fields = $alias;
                } else {
                    $fields = "a";
                }
            }
            $where      = $args ['where'];
            $whereQuery = '';
            if (isset($where) && !empty($where)) {
                $whereQuery = " WHERE ".$where;
            }
            $setParams = $args ['setParams'];
            // echo "<pre>"; print_r($where); echo "</pre>"; exit;
            $joins     = "";
            if (isset($args ['joins']) && !empty($args ['joins'])) {
                $joins = implode(' ', $args ['joins']);
            }
            // echo $joins; exit;
            $groupby = '';
            if (isset($args ['groupby']) && !empty($args ['groupby'])) {
                $groupby = " GROUP BY ".$args ['groupby'];
            }
            $orderby = '';
            if (isset($args ['orderby']) && !empty($args ['orderby'])) {
                $orderby = " ORDER BY ".$args ['orderby'];
            }

            $dql   = "SELECT ".$fields."
                 FROM ".$entity." a
                 ".$joins."
                 ".$whereQuery." ".$groupby." ".$orderby;
            // echo $dql;
            $query = $this->_em->createQuery($dql);
            if (isset($setParams) && !empty($setParams)) {
                $query->setParameters($setParams);
            }

            if (isset($offset) && $offset > 0) {
                $query->setFirstResult($startlimit);
                $query->setMaxResults($offset);
            }
            // $query->useResultCache(true);
            // $result = $query->getSingleResult(2);
            $result = $query->getOneOrNullResult(2);
            // echo "<pre>"; print_r($result); echo "</pre>"; exit;
            // $diff = microtime(true) - $before;
            // echo "Time : " . $diff;
            return $result;
        } catch (\Exception $e) {
            // echo 'Message: ' . $e->getMessage() . '<br>'; exit;
        }
    }

    /**
     * Creates a Query.
     * 
     * @param array $args.
     *        	array entity
     *        	array fields
     *        	array joins
     *        	array where
     *        	string groupby
     *        	string orderby
     *        	Example Usage :
     *        	$getArgs = array(
     *        	'entity' => 'ZSELEX_Entity_Shop',
     *        	'fields' => array('a.shop_id', 'a.shop_name', 'b.city_name', 'c.aff_id', 'c.aff_image'),
     *        	'joins' => array('LEFT JOIN a.city b', 'LEFT JOIN a.aff_id c'),
     *        	'where' => array('a.shop_id' => $shop_id)
     *        	);
     * @return single row
     */
    public function fetchAll($args)
    {
        try {
            // echo "<pre>"; print_r($args); echo "</pre>"; exit;
            // echo "class :" . get_class($this);
            // $before = microtime(true);
            $entity = $args ['entity'];
            $alias  = 'a';
            if (isset($args ['alias'])) {
                $alias = $args ['alias'];
            }

            $startlimit = $args ['startlimit'];
            if ($startlimit > 0) {
                $startlimit = $startlimit - 1;
            }
            $offset = $args ['offset'];
            if (isset($args ['fields']) && !empty($args ['fields'])) {
                $fields = $this->generateFields($args ['fields']);
            } else {
                if (isset($alias) && !empty($alias)) {
                    $fields = $alias;
                } else {
                    $fields = "a";
                }
            }
            $where      = $args ['where'];
            $whereQuery = '';
            if (isset($where) && !empty($where)) {
                $whereQuery = " WHERE ".$where;
            }
            $setParams = $args ['setParams'];
            // echo "<pre>"; print_r($where); echo "</pre>"; exit;
            $joins     = "";
            if (isset($args ['joins']) && !empty($args ['joins'])) {
                $joins = implode(' ', $args ['joins']);
            }
            // echo $joins; exit;
            $groupby = '';
            if (isset($args ['groupby']) && !empty($args ['groupby'])) {
                $groupby = " GROUP BY ".$args ['groupby'];
            }
            $orderby = '';
            if (isset($args ['orderby']) && !empty($args ['orderby'])) {
                $orderby = " ORDER BY ".$args ['orderby'];
            }

            $dql   = "SELECT ".$fields."
                 FROM ".$entity." ".$alias." 
                 ".$joins."
                 ".$whereQuery." ".$groupby." ".$orderby;
            // echo $dql;
            $query = $this->_em->createQuery($dql);
            if (isset($setParams) && !empty($setParams)) {
                $query->setParameters($setParams);
            }

            if (isset($offset) && $offset > 0) {
                $query->setFirstResult($startlimit);
                $query->setMaxResults($offset);
            }
            // $query->useResultCache(true);
            $result = $query->getArrayResult();
            // echo "<pre>"; print_r($result); echo "</pre>"; exit;
            // $diff = microtime(true) - $before;
            // echo "Time : " . $diff;
            return $result;
        } catch (\Exception $e) {
            // echo 'Message: ' . $e->getMessage() . '<br>'; exit;
        }
    }

    public function deleteEntity($args = array(), $entity = '', $where = array())
    {
        // echo "<pre>"; print_r($args); echo "</pre>"; exit;
        try {
            $entity = (isset($args ['entity']) && !empty($args ['entity'])) ? $args ['entity']
                    : $entity;
            $where  = $this->generateWhere((isset($args ['where']) && !empty($args ['where']))
                        ? $args ['where'] : $where );
            $dql    = 'DELETE FROM '.$entity.' a WHERE '.$where ['where'];

            // echo $dql; exit;
            $query      = $this->_em->createQuery($dql);
            $query->setParameters($where ['setParams']);
            $numDeleted = $query->execute();
            // return $numDeleted;
            return true;
        } catch (\Exception $e) {
            echo 'Message: '.$e->getMessage().'<br>';
            // echo $dql . '<br>';
            exit();
        }
    }

    public function delete($entity, $where)
    {
        // echo "<pre>"; print_r($args); echo "</pre>"; exit;
        try {
            $entity     = $entity;
            $where      = $this->generateWhere($where);
            $dql        = 'DELETE FROM '.$entity.' a WHERE '.$where ['where'];
            $query      = $this->_em->createQuery($dql);
            $query->setParameters($where ['setParams']);
            $numDeleted = $query->execute();
            return $numDeleted;
        } catch (\Exception $e) {
            echo 'Message: '.$e->getMessage().'<br>';
            exit();
        }
    }

    public function deleteWhere($args = array(), $entity, $where,
                                $setParams = null)
    {
        // echo "<pre>"; print_r($args); echo "</pre>"; exit;
        try {
            $entity = $entity;
            // $setParams =
            // $where = $this->generateWhere($where);
            $dql    = 'DELETE FROM '.$entity.' a WHERE '.$where;
            // echo $dql; exit;
            $query  = $this->_em->createQuery($dql);
            if (isset($setParams) && !empty($setParams)) {
                $query->setParameters($setParams);
            }
            $numDeleted = $query->execute();
            return $numDeleted;
        } catch (\Exception $e) {
            echo 'Message: '.$e->getMessage().'<br>';
            exit();
        }
    }

    public function getUserInfo($args)
    {
        // return;
        // echo "<pre>"; print_r($args); echo "</pre>"; exit;
        try {

            $field = $args ['field'];

            $rsm = new ORM\Query\ResultSetMapping ();

            $rsm->addEntityResult($args ['entity'], 'u');
            $rsm->addFieldResult('u', $field, $field);
            $rsm->addMetaResult('u', 'uid', 'uid');
            $rsm->addMetaResult('u', 'uname', 'uname');

            $dql    = "SELECT  u.$field , a.uid , a.uname
                FROM ".$args ['table']." u
                INNER JOIN users a ON a.uid=u.$field
                WHERE u.$field=".$args ['user_id']." GROUP BY a.uid";
            // echo $dql . '<br>';
            $query  = $this->_em->createNativeQuery($dql, $rsm);
            $result = $query->getOneOrNullResult(2);
            return $result;
            // echo "<pre>"; print_r($result); echo "</pre>";
        } catch (\Exception $e) {
            echo 'Message: '.$e->getMessage();
            exit();
        }
    }
}