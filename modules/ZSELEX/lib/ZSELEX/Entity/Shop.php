<?php

/**
 * ZSELEX.
 *
 * @copyright 
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package ShopProducts
 * @author  <>.
 * @link http://modulestudio.de/
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Tue Feb 07 21:56:43 IST 2012.
 */
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for shop entities.
 *
 *
 * @ORM\Entity(repositoryClass="ZSELEX_Entity_Repository_ShopRepository")
 * @ORM\Table(name="zselex_shop",
 * indexes={
 * @ORM\index(name="shop_id", columns={"shop_id"}),
 * @ORM\index(name="urltitle", columns={"urltitle"}),
 * @ORM\index(name="search", columns={"country_id","region_id","city_id","area_id"})
 * })
 */
class ZSELEX_Entity_Shop extends Zikula_EntityAccess
{
    /**
     * shop_id field (record shop_id)
     *
     * @ORM\Id
     * @ORM\Column(type="bigint")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    public $shop_id;

    /**
     * @ORM\Column(length=255 , nullable=true)
     *
     * @var text $shop_name.
     */
    public $shop_name = '';

    /**
     * @ORM\Column(length=255 , nullable=true)
     * 
     * @var string $title.
     */
    public $title = '';

    /**
     * @ORM\Column(length=500 , nullable=true)
     *
     * @var string $urltitle.
     */
    public $urltitle = '';

    /**
     * @ORM\Column(type="bigint" , nullable=true)
     * 
     * @var string $user_id.
     */
    public $user_id = 0;

    /**
     * @ORM\ManyToOne(targetEntity="ZSELEX_Entity_Country", inversedBy="shop_countries")
     * @ORM\JoinColumn(name="country_id", referencedColumnName="country_id")
     */
    private $country = null;

    /**
     * @ORM\ManyToOne(targetEntity="ZSELEX_Entity_Region", inversedBy="shop_regions")
     * @ORM\JoinColumn(name="region_id", referencedColumnName="region_id")
     */
    public $region = null;

    /**
     * @ORM\ManyToOne(targetEntity="ZSELEX_Entity_City", inversedBy="shop_cities")
     * @ORM\JoinColumn(name="city_id", referencedColumnName="city_id")
     */
    public $city = null;

    /**
     * @ORM\ManyToOne(targetEntity="ZSELEX_Entity_Area", inversedBy="shop_areas")
     * @ORM\JoinColumn(name="area_id", referencedColumnName="area_id")
     */
    public $area = null;

    /**
     * @ORM\ManyToOne(targetEntity="ZSELEX_Entity_Branch", inversedBy="shop_branches")
     * @ORM\JoinColumn(name="branch_id", referencedColumnName="branch_id")
     */
    public $branch = null;

    /**
     * @ORM\Column(type="text" , nullable=true)
     * 
     * @var text $description.
     */
    public $description = '';

    /**
     * @ORM\Column(length=255 , nullable=true)
     *
     * @var text $theme.
     */
    public $theme = '';

    /**
     * @ORM\Column(type="text" , nullable=true)
     * 
     * @var text $shop_info.
     */
    public $shop_info = '';

    /**
     * @ORM\Column(type="text" , nullable=true)
     *
     * @var text $address.
     */
    public $address = '';

    /**
     * @ORM\Column(length=255 , nullable=true)
     * 
     * @var text $telephone.
     */
    public $telephone = '';

    /**
     * @ORM\Column(length="255" , nullable=true)
     *
     * @var text $fax.
     */
    public $fax = '';

    /**
     * @ORM\Column(length="255" , nullable=true)
     * 
     * @var text $email.
     */
    public $email = '';

    /**
     * @ORM\Column(type="text" , nullable=true)
     *
     * @var text $opening_hours.
     */
    public $opening_hours = '';

    /**
     * @ORM\Column(length="255" , nullable=true)
     * 
     * @var text $pictures.
     */
    public $pictures = '';

    /**
     * @ORM\Column(length="100" , nullable=true)
     *
     * @var text $default_img_frm.
     */
    public $default_img_frm = '';

    /**
     * @ORM\Column(type="smallint" , nullable=true)
     * 
     * @var text $main.
     */
    public $main = 0;

    /**
     * @ORM\Column(type="text" , nullable=true)
     *
     * @var text $meta_tag.
     */
    public $meta_tag = '';

    /**
     * @ORM\Column(type="text" , nullable=true)
     * 
     * @var text $meta_description.
     */
    public $meta_description = '';

    /**
     * @ORM\ManyToOne(targetEntity="ZSELEX_Entity_ShopAffiliation", inversedBy="affiliate_shops")
     * @ORM\JoinColumn(name="aff_id", referencedColumnName="aff_id")
     */
    public $aff_id = null;

    /**
     * @ORM\Column(length=300 , nullable=true)
     * 
     * @var text $vat_number.
     */
    public $vat_number = '';

    /**
     * @ORM\Column(type="boolean" , options={"default" = 0} , nullable=true)
     *
     * @var integer $shoptype_id.
     */
    public $advertise_sel_prods = 0;

    /**
     * @ORM\Column(length=300 , nullable=true)
     * 
     * @var text $delivery_time.
     */
    public $delivery_time = '';

    /**
     * @ORM\Column(type="smallint" , options={"default" = 0} , nullable=true)
     *
     * @var integer $shoptype_id.
     */
    public $shoptype_id = 0;

    /**
     * @ORM\Column(type="text" , nullable=true)
     * 
     * @var text $link_to_homepage.
     */
    public $link_to_homepage = '';

    /**
     * @ORM\Column(type="text" , nullable=true)
     * 
     * @var text $link_to_mailinglist.
     */
    public $link_to_mailinglist = '';

    /**
     * @ORM\Column(type="text" , nullable=true)
     *
     * @var text $terms_conditions.
     */
    public $terms_conditions = '';

    /**
     * @ORM\Column(type="boolean" , nullable=true)
     * 
     * @var text $purchase_collect_stat.
     */
    public $purchase_collect_stat = 0;

    /**
     * @ORM\Column(type="boolean" , nullable=true)
     *
     * @var text $email_purchase_tries.
     */
    public $email_purchase_tries = 0;

    /**
     * @ORM\Column(type="smallint" , nullable=true)
     * 
     * @var integer $status.
     */
    public $status = '';

    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     *
     * @var datetime $cr_date.
     */
    public $cr_date;

    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="create")
     * 
     * @var integer $cr_uid.
     */
    public $cr_uid;

    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     *
     * @var datetime $lu_date.
     */
    public $lu_date;

    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="update")
     * 
     * @var integer $lu_uid.
     */
    public $lu_uid;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_Product" ,cascade={"all"}, mappedBy="shop")
     */
    public $shop_products;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_ProductCategory" ,cascade={"all"}, mappedBy="shop")
     */
    public $shop_prod_categories;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_ServiceShop" ,cascade={"all"}, mappedBy="shop")
     */
    public $service_shops;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_ServiceBundle" ,cascade={"all"}, mappedBy="shop")
     */
    public $shop_service_bundles;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_ServiceDemo" ,cascade={"all"}, mappedBy="shop")
     */
    public $shop_service_demo_bundles;

    // /**
    // * @ORM\OneToOne(targetEntity="ZSELEX_Entity_ShopSetting" , cascade={"all"} , mappedBy="shop")
    // */
    // public $shop_settings;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_Event" , cascade={"all"} , mappedBy="shop")
     */
    public $shop_events;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_MiniShop" , cascade={"all"} , mappedBy="shop")
     */
    public $minishops;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_Advertise" , cascade={"all"} , mappedBy="shop")
     */
    public $shop_ads;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_ShopOwner" , mappedBy="shop")
     */
    public $shop_owners;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_ShopAdmin" , cascade={"all"} , mappedBy="shop")
     */
    public $shop_admins;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_Rating" , cascade={"all"} , mappedBy="shop")
     */
    public $shop_ratings;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_Keyword" , cascade={"all"} , mappedBy="shop")
     */
    public $shop_keywords;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_MinisiteImage" , mappedBy="shop")
     */
    public $shop_images;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_Gallery" , cascade={"all"} , mappedBy="shop")
     */
    public $shop_gallery;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_ZenShop" , cascade={"all"} , mappedBy="shop")
     */
    public $shop_zencarts;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_ProductOption" , cascade={"all"} , mappedBy="shop")
     */
    public $shop_options;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_ProductOptionValue" , cascade={"all"} , mappedBy="shop")
     */
    public $shop_option_values;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_Banner" , cascade={"all"} , mappedBy="shop")
     */
    public $shop_banners;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_Announcement" , cascade={"all"} , mappedBy="shop")
     */
    public $shop_announcements;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_Pdf" , cascade={"all"} , mappedBy="shop")
     */
    public $shop_pdfs;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_Employee" , cascade={"all"} , mappedBy="shop")
     */
    public $shop_employees;

    /**
     * @ORM\OneToMany(targetEntity="ZSELEX_Entity_Manufacturer" , cascade={"all"} , mappedBy="shop")
     */
    public $shop_manufacturers;

    /**
     * @ORM\ManyToMany(targetEntity="ZSELEX_Entity_Category" , inversedBy="categories_shop" , cascade={"all"})
     * @ORM\JoinTable(name="zselex_shop_to_category",
     * joinColumns={@ORM\JoinColumn(name="shop_id", referencedColumnName="shop_id")},
     * inverseJoinColumns={@ORM\JoinColumn(name="category_id", referencedColumnName="category_id")}
     * )
     */
    protected $shop_to_category;

    /**
     * @ORM\ManyToMany(targetEntity="ZSELEX_Entity_Branch" , inversedBy="shop_branches" , cascade={"all"})
     * @ORM\JoinTable(name="zselex_shop_to_branch",
     * joinColumns={@ORM\JoinColumn(name="shop_id", referencedColumnName="shop_id")},
     * inverseJoinColumns={@ORM\JoinColumn(name="branch_id", referencedColumnName="branch_id")}
     * )
     */
    protected $shop_to_branch;

    /**
     * @ORM\OneToMany(targetEntity="ZTEXT_Entity_Page" , cascade={"all"} , mappedBy="shop")
     */
    public $shop_pages;

    protected function setShop_to_category($shop_to_category)
    {
        foreach ($this->shop_to_category as $id => $shop_to_cat) {
            if (!isset($shop_to_category [$id])) {
                // remove from old because it doesn't exist in new
                $this->shop_to_category->remove($id);
            } else {
                // the product already exists do not overwrite
                unset($shop_to_category [$id]);
            }
        }

        // add products that exist in new but not in old
        foreach ($shop_to_category as $id => $shop_to_cat) {
            $this->shop_to_category [$id] = $shop_to_cat;
        }

        // $this->shop_to_category = $shop_to_category;
    }

    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->shop_products             = new ArrayCollection ();
        $this->shop_prod_categories      = new ArrayCollection ();
        $this->service_shops             = new ArrayCollection ();
        $this->shop_service_bundles      = new ArrayCollection ();
        $this->shop_service_demo_bundles = new ArrayCollection ();
        $this->shop_pdfs                 = new ArrayCollection ();
        $this->shop_employees            = new ArrayCollection ();
        // $this->shop_settings = new ArrayCollection();
        $this->shop_events               = new ArrayCollection ();
        $this->shop_announcements        = new ArrayCollection ();
        $this->shop_banners              = new ArrayCollection ();
        $this->shop_to_category          = new ArrayCollection ();
        $this->minishops                 = new ArrayCollection ();
        $this->shop_ads                  = new ArrayCollection ();
        $this->shop_owners               = new ArrayCollection ();
        $this->shop_ratings              = new ArrayCollection ();
        $this->shop_keywords             = new ArrayCollection ();
        $this->shop_images               = new ArrayCollection ();
        $this->shop_gallery              = new ArrayCollection ();
        $this->shop_zencarts             = new ArrayCollection ();
        $this->shop_admins               = new ArrayCollection ();
        $this->shop_option_values        = new ArrayCollection ();
        $this->shop_manufacturers        = new ArrayCollection ();
        $this->shop_to_branch            = new ArrayCollection ();
    }

    public function addCategory(ZSELEX_Entity_Category $category = null)
    {
        $this->shop_to_category->add($category);
    }

    public function removeCategory(ZSELEX_Entity_Category $category)
    {
        $this->shop_to_category->removeElement($category);
    }

    public function addBranch(ZSELEX_Entity_Branch $branch = null)
    {
        $this->shop_to_branch->add($branch);
    }

    public function removeBranch(ZSELEX_Entity_Branch $branch)
    {
        $this->shop_to_branch->removeElement($branch);
    }
    /*
     * public function addCategories(ZSELEX_Entity_Category $categories) {
     * $this->shop_to_category[] = $categories;
     * }
     */

    public function __toString()
    {
        return $this->shop_name;
    }

    public function deleteCategory($shop_id)
    {
        // return $this->shop_to_category->removeElement($shop_id);
        $this->getShop_to_category()->removeElement($shop_id);
    }

    public function removeChild(ZSELEX_Entity_Shop $shop)
    {
        foreach ($this->getShop_to_category() as $key => $child) {
            if ($child->getShop_id() == $shop->getShop_id())
                    unset($this->children [$key]);
            break;
        }
    }

    /**
     * Get id.
     *
     * @return integer
     */
    public function getShop_id()
    {
        return $this->shop_id;
    }

    /**
     * Get shop_name.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set title.
     *
     * @param string $title.
     *
     * @return void
     */
    public function setTitle($title)
    {
        $this->title = $title;
    }

    /**
     * Get cityId.
     *
     * @return integer
     */
    public function getUrltitle()
    {
        return $this->urltitle;
    }

    /**
     * Set urltitle.
     *
     * @param string $urltitle.
     *
     * @return void
     */
    public function setUrltitle($urltitle)
    {
        $this->urltitle = $urltitle;
    }

    /**
     * Get country_id.
     *
     * @return ZSELEX_Entity_Country
     */
    public function getUser_id()
    {
        return $this->user_id;
    }

    /**
     * Set user_id.
     *
     * @param integer $user_id.
     */
    public function setUser_id($user_id)
    {
        $this->user_id = $user_id;
    }

    /**
     * get the Country
     *
     * @return integer
     */
    public function getCountry()
    {
        return $this->country;
    }

    /**
     * set the Country
     *
     * @param string $country
     */
    public function setCountry(ZSELEX_Entity_Country $country)
    {
        $this->country = $country;
    }

    /**
     * get the Region
     *
     * @return integer
     */
    public function getRegion()
    {
        return $this->region;
    }

    /**
     * set the Region
     *
     * @param string $Region
     */
    public function setRegion(ZSELEX_Entity_Region $region)
    {
        $this->region = $region;
    }

    /**
     * get the City
     *
     * @return integer
     */
    public function getCity()
    {
        return $this->city;
    }

    /**
     * set the City
     *
     * @param string $city
     */
    public function setCity(ZSELEX_Entity_City $city)
    {
        $this->city = $city;
    }

    /**
     * get the Area
     *
     * @return integer
     */
    public function getArea()
    {
        return $this->area;
    }

    /**
     * set the City
     *
     * @param string $city
     */
    public function setArea(ZSELEX_Entity_Area $area)
    {
        $this->area = $area;
    }

    /**
     * get the Category
     *
     * @return integer
     */
    public function getCategory()
    {
        return $this->category;
    }

    /**
     * set the Category
     *
     * @param integer $category
     */
    public function setCategory(ZSELEX_Entity_Category $category)
    {
        $this->category = $category;
    }

    /**
     * get the Branch
     *
     * @return integer
     */
    public function getBranch()
    {
        return $this->branch;
    }

    /**
     * set the Branch
     *
     * @param integer $branch
     */
    public function setBranch(ZSELEX_Entity_Branch $branch)
    {
        $this->branch = $branch;
    }

    /**
     * get the Theme
     *
     * @return string theme
     */
    public function getTheme()
    {
        return $this->theme;
    }

    /**
     * set the Theme
     *
     * @param integer $theme
     */
    public function setTheme($theme)
    {
        $this->theme = $theme;
    }

    /**
     * get the shop_name
     *
     * @return string theme
     */
    public function getShop_name()
    {
        return $this->shop_name;
    }

    /**
     * set the shop_name
     *
     * @param string $shop_name
     */
    public function setShop_name($shop_name)
    {
        $this->shop_name = $shop_name;
    }

    /**
     * get the description
     *
     * @return string $description
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * set the description
     *
     * @param string $description
     */
    public function setDescription($description)
    {
        $this->description = $description;
    }

    /**
     * get the shop_info
     *
     * @return string $shop_info
     */
    public function getShop_info()
    {
        return $this->shop_info;
    }

    /**
     * set the shop_info
     *
     * @param string $shop_info
     */
    public function setShop_info($shop_info)
    {
        $this->shop_info = $shop_info;
    }

    /**
     * get the address
     *
     * @return string $address
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * set the address
     *
     * @param string $address
     */
    public function setAddress($address)
    {
        $this->address = $address;
    }

    /**
     * get the telephone
     *
     * @return string $telephone
     */
    public function getTelephone()
    {
        return $this->telephone;
    }

    /**
     * set the telephone
     *
     * @param string $telephone
     */
    public function setTelephone($telephone)
    {
        $this->telephone = $telephone;
    }

    /**
     * get the fax
     *
     * @return integer $fax
     */
    public function getFax()
    {
        return $this->fax;
    }

    /**
     * set the fax
     *
     * @param integer $fax
     */
    public function setFax($fax)
    {
        $this->fax = $fax;
    }

    /**
     * get the email
     *
     * @return string $email
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * set the email
     *
     * @param integer $email
     */
    public function setEmail($email)
    {
        $this->email = $email;
    }

    /**
     * get the opening_hours
     *
     * @return string $opening_hours
     */
    public function getOpening_hours()
    {
        return $this->opening_hours;
    }

    /**
     * set the opening_hours
     *
     * @param integer $opening_hours
     */
    public function setOpening_hours($opening_hours)
    {
        $this->opening_hours = $opening_hours;
    }

    /**
     * get the pictures
     *
     * @return string $pictures
     */
    public function getPictures()
    {
        return $this->pictures;
    }

    /**
     * set the pictures
     *
     * @param string $pictures
     */
    public function setPictures($pictures)
    {
        $this->pictures = $pictures;
    }

    /**
     * get the default_img_frm
     *
     * @return string $default_img_frm
     */
    public function getDefault_img_frm()
    {
        return $this->default_img_frm;
    }

    /**
     * set the default_img_frm
     *
     * @param string $default_img_frm
     */
    public function setDefault_img_frm($default_img_frm)
    {
        $this->default_img_frm = $default_img_frm;
    }

    /**
     * get the main
     *
     * @return string $main
     */
    public function getMain()
    {
        return $this->main;
    }

    /**
     * set the main
     *
     * @param string $main
     */
    public function setMain($main)
    {
        $this->main = $main;
    }

    /**
     * get the meta_tag
     *
     * @return string $meta_tag
     */
    public function getMeta_tag()
    {
        return $this->meta_tag;
    }

    /**
     * set the meta_tag
     *
     * @param string $meta_tag
     */
    public function setMeta_tag($meta_tag)
    {
        $this->meta_tag = $meta_tag;
    }

    /**
     * get the meta_description
     *
     * @return string $meta_description
     */
    public function getMeta_description()
    {
        return $this->meta_description;
    }

    /**
     * set the meta_description
     *
     * @param string $meta_description
     */
    public function setMeta_description($meta_description)
    {
        $this->meta_description = $meta_description;
    }

    public function getLink_to_homepage()
    {
        return $this->link_to_homepage;
    }

    public function setLink_to_homepage($link_to_homepage)
    {
        $this->link_to_homepage = $link_to_homepage;
    }

    public function getLink_to_mailinglist()
    {
        return $this->link_to_mailinglist;
    }

    public function setLink_to_mailinglist($link_to_mailinglist)
    {
        $this->link_to_mailinglist = $link_to_mailinglist;
    }

    public function setTerms_conditions($terms_conditions)
    {
        $this->terms_conditions = $terms_conditions;
    }

    public function getTerms_conditions()
    {
        return $this->terms_conditions;
    }

    /**
     * get the shoptype_id
     *
     * @return string $shoptype_id
     */
    public function getShoptype_id()
    {
        return $this->shoptype_id;
    }

    /**
     * set the meta_description
     *
     * @param string $meta_description
     */
    public function setShoptype_id($shoptype_id)
    {
        $this->shoptype_id = $shoptype_id;
    }

    /**
     * get the enable_checkoutinfo
     *
     * @return string $enable_checkoutinfo
     */
    public function getEnable_checkoutinfo()
    {
        return $this->enable_checkoutinfo;
    }

    /**
     * set the checkout_info
     *
     * @param
     *        	string checkout_info
     */
    public function setCheckout_info($checkout_info)
    {
        $this->checkout_info = $checkout_info;
    }

    /**
     * get the aff_id
     *
     * @return string $aff_id
     */
    public function getAff_id()
    {
        return $this->aff_id;
    }

    public function setAff_id(ZSELEX_Entity_ShopAffiliation $aff_id)
    {
        $this->aff_id = $aff_id;
    }

    /**
     * set the aff_id
     *
     * @param string $aff_id
     */
    public function setVat_number($vat_number)
    {
        $this->vat_number = $vat_number;
    }

    public function getVat_number()
    {
        return $this->vat_number;
    }

    public function getDelivery_time()
    {
        return $this->delivery_time;
    }

    public function setDelivery_time($delivery_time)
    {
        $this->delivery_time = $delivery_time;
    }

    public function getShop_to_category()
    {
        return $this->shop_to_category;
    }

    /**
     * Get parentId.
     *
     * @return integer
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set parentId.
     *
     * @param integer $parentId.
     *
     * @return void
     */
    public function setStatus($status)
    {
        if ($status != $this->status) {
            $this->status = $status;
        }
    }

    /**
     * Get created user id.
     *
     * @return integer[]
     */
    public function getCr_date()
    {
        return $this->cr_date;
    }

    /**
     * Set created user id.
     *
     * @param integer[] $createdUserId.
     *
     * @return void
     */
    public function setCr_date($cr_date)
    {
        $this->cr_date = $cr_date;
    }

    /**
     * Get updated user id.
     *
     * @return integer[]
     */
    public function getCr_uid()
    {
        return $this->cr_uid;
    }

    /**
     * Set updated user id.
     *
     * @param integer[] $updatedUserId.
     *
     * @return void
     */
    public function setCr_uid($cr_uid)
    {
        $this->cr_uid = $cr_uid;
    }

    /**
     * Get created date.
     *
     * @return datetime[]
     */
    public function getLu_date()
    {
        return $this->lu_date;
    }

    /**
     * Set created date.
     *
     * @param datetime[] $createdDate.
     *
     * @return void
     */
    public function setLu_date($lu_date)
    {
        $this->lu_date = $lu_date;
    }

    /**
     * Get updated date.
     *
     * @return datetime[]
     */
    public function getLu_uid()
    {
        return $this->lu_uid;
    }

    /**
     * Get updated date.
     *
     * @return datetime[]
     */
    public function setLu_uid($lu_uid)
    {
        $this->lu_uid = $lu_uid;
    }

    public function getShop_products()
    {
        return $this->shop_products;
    }

    public function setShop_products($shop_products)
    {
        $this->shop_products = $shop_products;
    }

    public function getShop_prod_categories()
    {
        return $this->shop_prod_categories;
    }

    public function setShop_prod_categories($shop_prod_categories)
    {
        $this->shop_prod_categories = $shop_prod_categories;
    }

    public function getShop_settings()
    {
        return $this->shop_settings;
    }

    public function setShop_settings($shop_settings)
    {
        $this->shop_settings = $shop_settings;
    }

    public function getShop_events()
    {
        return $this->shop_events;
    }

    public function setShop_events($shop_events)
    {
        $this->shop_events = $shop_events;
    }

    public function addShop(ZSELEX_Entity_ShopSetting $shop_setting)
    {
        // $shop_setting = new ZSELEX_Entity_ShopSetting();
        if (!$this->shop_settings->contains($shop_setting)) {
            $this->shop_settings->add($shop_setting);
        }

        return $this;
    }

    public function removeShop(ZSELEX_Entity_ShopSetting $shop_setting)
    {
        // $shop_setting = new ZSELEX_Entity_ShopSetting();
        if ($this->shop_settings->contains($shop_setting)) {
            $this->shop_settings->removeElement($shop_setting);
        }

        return $this;
    }

    public function getPurchase_collect_stat()
    {
        return $this->purchase_collect_stat;
    }

    public function setPurchase_collect_stat($purchase_collect_stat)
    {
        $this->purchase_collect_stat = $purchase_collect_stat;
    }

    public function getEmail_purchase_tries()
    {
        return $this->email_purchase_tries;
    }

    public function setEmail_purchase_tries($email_purchase_tries)
    {
        $this->email_purchase_tries = $email_purchase_tries;
    }

    public function getAdvertise_sel_prods()
    {
        return $this->advertise_sel_prods;
    }

    public function setAdvertise_sel_prods($advertiseSelProds)
    {
        $this->advertise_sel_prods = $advertiseSelProds;
    }

    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     * - no access to entity manager or unit of work apis
     * - no access to associations (not initialised yet)
     *
     * @see ShopProducts_Entity_Shop::postLoadCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostLoadCallback()
    {
        // echo 'performPostLoadCallback'; exit;
        // echo 'loaded a record ...';

        /*
         * $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
         * $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
         *
         * $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
         * if ($currentFunc != 'edit') {
         * $this['shop_name'] = ((isset($this['shop_name']) && !empty($this['shop_name'])) ? DataUtil::formatForDisplayHTML($this['shop_name']) : '');
         * }
         * if ($currentFunc != 'edit') {
         * $this['address'] = ((isset($this['address']) && !empty($this['address'])) ? DataUtil::formatForDisplayHTML($this['address']) : '');
         * }
         * $this->prepareItemActions();
         */
        return true;
    }

    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     * - no access to entity manager or unit of work apis
     * - no identifiers available if using an identity generator like sequences
     * - Doctrine won't recognize changes on relations which are done here
     * if this method is called by cascade persist
     * - no creation of other entities allowed
     *
     * @see ShopProducts_Entity_Shop::prePersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPrePersistCallback()
    {
        // echo 'performPrePersistCallback'; exit;
        // echo 'inserting a record ...';
        // $this->validate();
        return true;
    }

    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     * - no access to entity manager or unit of work apis
     *
     * @see ShopProducts_Entity_Shop::postPersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostPersistCallback()
    {
        // echo 'performPostPersistCallback'; exit;
        // echo 'inserted a record ...';
        return true;
    }

    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     * - no access to entity manager or unit of work apis
     * - will not be called for a DQL DELETE statement
     *
     * @see ShopProducts_Entity_Shop::preRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreRemoveCallback()
    {
        // echo 'performPreRemoveCallback'; exit;
        /*
         * // delete workflow for this entity
         * $result = Zikula_Workflow_Util::deleteWorkflow($this);
         * if ($result === false) {
         * $dom = ZLanguage::getModuleDomain('ShopProducts');
         * return LogUtil::registerError(__('Error! Could not remove stored workflow.', $dom));
         * }
         */
        return true;
    }

    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     * - no access to entity manager or unit of work apis
     * - will not be called for a DQL DELETE statement
     *
     * @see ShopProducts_Entity_Shop::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        // echo 'performPostRemoveCallback'; exit;
        // echo 'deleted a record ...';
        return true;
    }

    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     * - no access to entity manager or unit of work apis
     * - will not be called for a DQL UPDATE statement
     * - changes on associations are not allowed and won't be recognized by flush
     * - changes on properties won't be recognized by flush as well
     * - no creation of other entities allowed
     *
     * @see ShopProducts_Entity_Shop::preUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreUpdateCallback()
    {
        // echo 'performPreUpdateCallback'; exit;
        // echo 'updating a record ...';
        // $this->validate();
        return true;
    }

    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     * - no access to entity manager or unit of work apis
     * - will not be called for a DQL UPDATE statement
     *
     * @see ShopProducts_Entity_Shop::postUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostUpdateCallback()
    {
        // echo 'performPostUpdateCallback'; exit;
        // echo 'updated a record ...';
        return true;
    }

    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see ShopProducts_Entity_Shop::preSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreSaveCallback()
    {
        // echo 'performPreSaveCallback'; exit;
        // echo 'saving a record ...';
        // $this->validate();
        return true;
    }

    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see ShopProducts_Entity_Shop::postSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostSaveCallback()
    {
        // echo 'performPostSaveCallback'; exit;
        // $this->entityManager->getRepository('ZSELEX_Entity_Shop')->ge;
        return true;
    }
}