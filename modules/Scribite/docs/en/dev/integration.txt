Scribite v4.3.0 Integration
===========================

The following example shows an easy call for Scribite with check for existance of Scribite.

    if (ModUtil::available('Scribite')) {
        $scribiteheader = ModUtil:apiFunc('Scribite', 'user', 'loader', array(
            'modulename' => $args['modulename'],
            'editor'  => $args['editor'],
            'areas'   => $args['areas'],
            'tpl'     => $args['tpl']));
        PageUtil::addVar('header', $scribiteheader);
    }


Required parameters are:
    $args['areas'] - array of textarea id's for the editor, (optionally 'all' for all)

Optional parameters are:
    $args['editor']	- the desired editor needs to exist (xinha, niceditor, yui), uses
			  default editor if not choosen (if choosen in administration!)
    $args['modulename']	- name of the module calling Scribite
    $args['tpl'] - template name (if file not exists, default template is used)

The configuration of the editor is taken from Scribite configuration, but can be override from 
special template. Permissions will be recognized! Users need at least 'comment' rights for Scribite.

The call should be done before the call of templates.
Example (from the News module):

    $this->view->assign('preview', $preview);
    if (ModUtil::available('Scribite')) {
        $scribiteheader = ModUtil:apiFunc('Scribite', 'user', 'loader', array(
            'modulename' => 'News',
            'editor' => 'xinha',
            'areas' => array('news_bodytext', 'news_hometext'),
            'tpl' => 'xinha/news.tpl'));
        PageUtil::addVar('header', $scribiteheader);
    }
    
    // Return the output that has been generated by this function
    if (strtolower($type) == 'admin') {
        return $this->view->fetch('admin/new.tpl');
    } else {
        return $this->view->fetch('user/new.tpl');
    }