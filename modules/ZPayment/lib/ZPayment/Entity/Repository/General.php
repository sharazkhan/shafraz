<?php

/**
 * ZSELEX.
 *
 * @copyright R2International
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package ShopProducts
 * @author R2International <R2International>.
 * @link http://modulestudio.de/
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Tue Feb 07 21:56:43 IST 2012.
 */
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
use DoctrineExtensions\Paginate\Paginate;
use Doctrine\ORM;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the base repository class for shop entities.
 */
class ZPayment_Entity_Repository_General extends EntityRepository {

    function updateEntity($args) {
        //echo "<pre>"; print_r($args);  echo "</pre>"; exit;
        //  $setParams = $args['setParams'];
        $setParams = array();
        $entity = $args['entity'];
        $fields = $args['fields'];
        $where = $this->generateWhere($args['where']);
        $items = '';
        foreach ($fields as $fkey => $fval) {
            //  $items .= "a." . $fkey . "=" . "'$fval'" . ',';
            $items .= "a." . $fkey . "=" . ":$fkey" . ',';
            $setParams[$fkey] = $fval;
        }
        // echo $items; exit;
        //  echo "<pre>"; print_r($setParams);  echo "</pre>"; exit;
        $items = substr($items, 0, -1);

        $setParams += $where['setParams'];
        // echo "<pre>"; print_r($setParams);  echo "</pre>"; exit;
        // $where = $this->generateWhere($args['where']);
        $query = "UPDATE $entity a SET $items WHERE " . $where['where'];
       // echo $query; exit;
        $q = $this->_em->createQuery($query);
        $q->setParameters($setParams);
        $numUpdated = $q->execute();
        //return $numUpdated;
        return true;
    }

    public function getCount($args) {
        //echo "<pre>"; print_r($args);  echo "</pre>"; exit;
        try {
            $entity = $args['entity'];
            $field = $args['field'];
            $where = $args['where'];
            $dqlRes = $this->generateWhere($where);

            //echo "<pre>"; print_r($dqlRes);  echo "</pre>"; exit;
            $dql = "SELECT COUNT(a.$field) FROM $entity a 
                    WHERE " . $dqlRes['where'];
            //echo $dql;   exit;

            $query = $this->_em->createQuery($dql);
            $query->setParameters($dqlRes['setParams']);
            //   $query->setParameters(array('prod' => 332, 'opt' => 35));
            $count = $query->getSingleScalarResult();
            return $count;
        } catch (\Exception $e) {
            echo 'Message: ' . $e->getMessage();
            exit;
        }
    }

    public function generateFields($fields) {
        $fields = $fields;
        // echo "<pre>"; print_r($fields);  echo "</pre>"; exit;
        $output = '';
        $output = implode(' , ', $fields);
        return $output;
    }

    public function generateWhere($where, $like = array()) {
        $whereSql = '';
        $setParams = array();
        $i = 0;
        if (isset($where) && !empty($where)) {
            $i = 1;
            foreach ($where as $key => $val) {
                if (isset($key) && isset($val)) {
                    $keyArr = str_split($key);
                    $key1 = $key;
                    if ($keyArr[1] == ".") {
                        $key1 = substr($key, 2);
                    }
                    $whereArray[] = $key . "=" . "?$i";
                    $setParams[$i] = $val;
                }
                $i++;
            }
        }

        //echo "<pre>";  print_r($like);  echo "</pre>";  exit;

        $j = $i + 1;
        if (isset($like) && !empty($like)) {
            foreach ($like as $lkey => $lval) {
                $xplode = explode('LIKE', $lval);
                //echo "<pre>";  print_r($xplode);  echo "</pre>";  exit;
                // $keyArr1 = str_split($xplode[0]);
                $keyArr1 = $xplode[0];
                // echo "<pre>";  print_r($keyArr1);  echo "</pre>";  exit;
                $key2 = $xplode[0];
                // echo $keyArr1[1]; exit;
                if ($keyArr1[1] == ".") {
                    $key2 = substr($xplode[0], 2);
                }
                $key2 = trim($key2);
                // echo $key2; exit;

                $whereArray[] = $xplode[0] . " LIKE " . ":$key2";
                // $whereArray[] = $xplode[0] . "LIKE '%" . DataUtil::formatForStore('shar') . "%'";
                $setParams[$key2] = trim($xplode[1]);
                $j++;
            }
        }


        $whereSql = implode(' AND ', $whereArray);
        // echo $whereSql; exit;
        // echo "<pre>";  print_r($setParams);  echo "</pre>";  exit;
        $return = array('where' => $whereSql, 'setParams' => $setParams);
        //echo "<pre>";  print_r($return);   echo "</pre>";


        return $return;
    }

    public function genWhere($whereArr) {
        // echo "<pre>"; print_r($fields);  echo "</pre>"; exit;
        $where = '';
        $where = implode(' AND ', $whereArr);
        return $where;
    }

    public function generateWhere1($array, $like = array(), $subquery = array()) {
        $whereSql = '';
        $setParams = array();
        $i = 1;
        foreach ($array as $key => $val) {
            if (isset($key) && isset($val)) {
                $keyArr = str_split($key);
                $key1 = $key;
                if ($keyArr[1] == ".") {
                    $key1 = substr($key, 2);
                }
                $whereArray[] = $key . "=" . ":$key1";
                $setParams[$key1] = $val;
            }
            $i++;
        }
        $whereSql = implode(' AND ', $whereArray);
        $return = array('where' => $whereSql, 'setParams' => $setParams);
        return $return;
    }

    /**
     * Creates a Query.
     * @param array $args.
     * array entity  
     * array fields  
     * array joins
     * array where
     * string groupby
     * string orderby
     * Example Usage : 
     * $args = array(
      'entity' => 'ZSELEX_Entity_Shop',
      'fields' => array('a.shop_id', 'a.shop_name', 'b.city_name', 'c.aff_id', 'c.aff_image'),
      'joins' => array('LEFT JOIN a.city b', 'LEFT JOIN a.aff_id c'),
      'where' => array('a.shop_id' => $shop_id)
      );
     * @return single row
     */
    public function get($args) {
        //  echo "<pre>";  print_r($args);  echo "</pre>"; exit;

        $entity = $args['entity'];
        $fields = $this->generateFields($args['fields']);
        $setParams = array();
        // $args['setParams'] = array('productId' => 22);
        if (isset($args['setParams']) && !empty($args['setParams'])) {
            $setParams = $args['setParams'];
        }
        $whereQuery = ' ';
        $w = 0;
        if (!empty($args['where']) || !empty($args['like'])) {
            $where = $this->generateWhere($args['where'], $args['like']);
            $whereQuery = ' WHERE ' . $where['where'];
            $setParams += $where['setParams'];
            $w++;
        }
        // echo "<pre>";  print_r($where);  echo "</pre>"; 
        // echo "<pre>";  print_r($setParams);  echo "</pre>"; 
        $joins = "";
        if (isset($args['joins']) && !empty($args['joins'])) {
            $joins = implode(' ', $args['joins']);
        }

        $subquery = '';
        if (isset($args['subquery']) && !empty($args['subquery'])) {
            if ($w > 0) {
                $subquery = ' AND ' . implode(' AND ', $args['subquery']);
            } else {
                $subquery = ' WHERE ' . implode(' AND ', $args['subquery']);
            }
        }

        $groupby = '';
        if (isset($args['groupby']) && !empty($args['groupby'])) {
            $groupby = " GROUP BY " . $args['groupby'];
        }
        $orderby = '';
        if (isset($args['orderby']) && !empty($args['orderby'])) {
            $orderby = " ORDER BY " . $args['orderby'];
        }


        $dql = "SELECT " . $fields . "
                 FROM " . $entity . " a
                 " . $joins . "
                 " . $whereQuery . " " . $subquery . " " . $groupby . " " . $orderby;
       // echo $dql . '<br>';
        $query = $this->_em->createQuery($dql);
        if (isset($setParams) && !empty($setParams)) {
            $query->setParameters($where['setParams']);
        }
        $result = $query->getOneOrNullResult(2);
        // echo "<pre>";  print_r($result);  echo "</pre>"; exit;
        return $result;
    }

    /**
     * Creates a Query.
     * @param array $args.
     * array entity  
     * array fields  
     * array joins
     * array where
     * string groupby
     * string orderby
     * Example Usage : 
     * $getArgs = array(
      'entity' => 'ZSELEX_Entity_Shop',
      'fields' => array('a.shop_id', 'a.shop_name', 'b.city_name', 'c.aff_id', 'c.aff_image'),
      'joins' => array('LEFT JOIN a.city b', 'LEFT JOIN a.aff_id c'),
      'where' => array('a.shop_id' => $shop_id)
      );
     * @return single row
     */
    public function getAll($args) {
        //echo "<pre>";   print_r($args);  echo "</pre>";
        $dqlQuery = '';
        $entity = $args['entity'];
        $fields = $this->generateFields($args['fields']);
        $setParams = array();
        $startlimit = $args['startlimit'];
        if ($startlimit > 0) {
            $startlimit = $startlimit - 1;
        }
        $offset = $args['offset'];
        $paginate = $args['paginate'];
        $sql = $args['sql'];
        $like = $args['like'];

        if (isset($args['setParams']) && !empty($args['setParams'])) {
            $setParams = $args['setParams'];
        }

        $joins = "";
        if (isset($args['joins']) && !empty($args['joins'])) {
            $joins = implode(' ', $args['joins']);
            $dqlQuery .= $joins;
        }

        $whereQuery = ' ';
        $w = 0;
        if (!empty($args['where']) || !empty($args['like'])) {
            $where = $this->generateWhere($args['where'], $args['like']);
            $whereQuery = ' WHERE ' . $where['where'];
            $dqlQuery .= $whereQuery;
            $setParams += $where['setParams'];
            $w++;
        }
        //  echo "<pre>";  print_r($where);  echo "</pre>";   exit;
        //echo $subquery; exit;

        $subquery = '';
        if (isset($args['subquery']) && !empty($args['subquery'])) {
            if ($w > 0) {
                $subquery = ' AND ' . implode(' AND ', $args['subquery']);
            } else {
                $subquery = ' WHERE ' . implode(' AND ', $args['subquery']);
            }
            $dqlQuery .= $subquery;
        }
        //echo $joins; exit;
        $groupby = '';
        if (isset($args['groupby']) && !empty($args['groupby'])) {
            $groupby = "  GROUP BY  " . $args['groupby'];
            $dqlQuery .= $groupby;
        }
        $orderby = '';
        if (isset($args['orderby']) && !empty($args['orderby'])) {
            $orderby = " ORDER BY " . $args['orderby'];
            $dqlQuery .= $orderby;
        }
        //$sql = '';
        $dql = "SELECT " . $fields . "
                 FROM " . $entity . " a
                 " . $joins . " "
                . $whereQuery . " "
                . $subquery . " "
                . $groupby . " "
                . $orderby;

        //echo $dql; 
        $query = $this->_em->createQuery($dql);

        if (isset($setParams) && !empty($setParams)) {
            $query->setParameters($setParams);
        }

        if (isset($offset) && $offset > 0) {
            $query->setFirstResult($startlimit);
            $query->setMaxResults($offset);
        }

        if ($paginate == true) {
            $total_count = Paginate::getTotalQueryResults($query);
        }
        $result = $query->getArrayResult();
        $return = array();
        if ($paginate == true) {
            $count = $total_count;
            $return['result'] = $result;
            $return['count'] = $total_count;
        } else {
            $return = $result;
        }

        return $return;
    }

    /**
     * Creates a Query.
     * @param array $args.
     * array entity  
     * array fields  
     * array joins
     * array where
     * string groupby
     * string orderby
     * Example Usage : 
     * $args = array(
      'entity' => 'ZSELEX_Entity_Shop',
      'fields' => array('a.shop_id', 'a.shop_name', 'b.city_name', 'c.aff_id', 'c.aff_image'),
      'joins' => array('LEFT JOIN a.city b', 'LEFT JOIN a.aff_id c'),
      'where' => array('a.shop_id' => $shop_id)
      );
     * @return single row
     */
    public function fetch($args) {
        //  echo "<pre>";  print_r($args);  echo "</pre>"; exit;
        $entity = $args['entity'];
        $fields = $this->generateFields($args['fields']);
        // $where = $this->genWhere($args['where']);
        $where = $args['where'];
        $setParams = $args['setParams'];
        //echo "<pre>";  print_r($where);  echo "</pre>"; exit;
        $joins = "";
        if (isset($args['joins']) && !empty($args['joins'])) {
            $joins = implode(' ', $args['joins']);
        }
        $groupby = $args['groupby'];
        $orderby = $args['orderby'];

        $dql = "SELECT " . $fields . "
                 FROM " . $entity . " a
                 $joins
                 WHERE " . $where . " " . $groupby . " " . $orderby;
//        echo $dql; 
        $query = $this->_em->createQuery($dql);
        if (isset($setParams)) {
            $query->setParameters($setParams);
        }
        $result = $query->getOneOrNullResult(2);
        // echo "<pre>";  print_r($result);  echo "</pre>"; exit;
        return $result;
    }

    /**
     * Creates a Query.
     * @param array $args.
     * array entity  
     * array fields  
     * array joins
     * array where
     * string groupby
     * string orderby
     * Example Usage : 
     * $getArgs = array(
      'entity' => 'ZSELEX_Entity_Shop',
      'fields' => array('a.shop_id', 'a.shop_name', 'b.city_name', 'c.aff_id', 'c.aff_image'),
      'joins' => array('LEFT JOIN a.city b', 'LEFT JOIN a.aff_id c'),
      'where' => array('a.shop_id' => $shop_id)
      );
     * @return single row
     */
    public function fetchAll($args) {
        //  echo "<pre>";  print_r($args);  echo "</pre>"; exit;
        // echo "class :" . get_class($this);
        //$before = microtime(true);
        $entity = $args['entity'];
        $fields = $this->generateFields($args['fields']);
        $where = $args['where'];
        $setParams = $args['setParams'];
        //echo "<pre>";  print_r($where);  echo "</pre>"; exit;
        $joins = "";
        if (isset($args['joins']) && !empty($args['joins'])) {
            $joins = implode(' ', $args['joins']);
        }
        //echo $joins; exit;
        $groupby = '';
        if (isset($args['groupby']) && !empty($args['groupby'])) {
            $groupby = " GROUP BY " . $args['groupby'];
        }
        $orderby = '';
        if (isset($args['orderby']) && !empty($args['orderby'])) {
            $orderby = " ORDER BY " . $args['orderby'];
        }

        $dql = "SELECT " . $fields . "
                 FROM " . $entity . " a
                 " . $joins . "
                 WHERE " . $where . " " . $groupby . " " . $orderby;
        // echo $dql;
        $query = $this->_em->createQuery($dql);
        $query->setParameters($setParams);
        $query->useResultCache(true);
        $result = $query->getArrayResult();
        // echo "<pre>";  print_r($result);  echo "</pre>"; exit;
        // $diff = microtime(true) - $before;
        // echo "Time :  " . $diff;
        return $result;
    }

    public function deleteEntity($args) {
        // echo "<pre>"; print_r($args);  echo "</pre>"; exit;
        $entity = $args['entity'];
        $where = $this->generateWhere($args['where']);
        $dql = 'DELETE FROM ' . $entity . ' a WHERE ' . $where['where'];
        $query = $this->_em->createQuery($dql);
        $query->setParameters($where['setParams']);
        $numDeleted = $query->execute();
        return $numDeleted;
    }

}
